{"version":3,"sources":["contexts/data-context.tsx","components/table-header.tsx","utils/index.ts","components/table-row.tsx","components/table-body.tsx","components/table.tsx","pages/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initData","data","dataContext","React","createContext","useData","context","useContext","Error","DataProvider","props","useState","setData","value","useMemo","Provider","TableHeader","columns","className","data-test","map","column","getId","obj","key","pd","uuid","Object","defineProperty","toString","TableRow","row","onRemove","opened","setOpened","kids","keys","kidsProps","filter","prop","records","length","id","Fragment","onClick","index","colSpan","toUpperCase","rows","TableBody","stateRows","setRows","removeRow","useCallback","splice","Table","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAKMA,EAAuBC,EACvBC,EAAcC,IAAMC,cAAc,MAO3BC,EACT,WAKI,IAAMC,EAAUH,IAAMI,WAAWL,GAGjC,IAAKI,EACD,MAAM,IAAIE,MAAM,8CAIpB,OAAOF,GAQFG,EAAe,SAACC,GAGzB,MAAwBP,IAAMQ,SAASX,GAAvC,mBAAOC,EAAP,KAAaW,EAAb,KAKMC,EAAQV,IAAMW,SAAQ,iBAAM,CAACb,EAAMW,KAAU,CAACX,EAAMW,IAG1D,OAAO,cAACV,EAAYa,SAAb,aAAsBF,MAAOA,GAAWH,KCZpCM,EApBiC,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,QAC9C,OACI,uBAAOC,UAAU,cAAcC,YAAU,yBAAzC,SACI,qBAAIA,YAAU,cAAd,UACI,oBAAIA,YAAU,eAAd,kBACCF,EAAQG,KAAI,SAAAC,GAAM,OACf,oBACIF,YAAU,eAEVD,UAAU,kDAHd,SAKKG,GAHIA,MAMb,oBAAIF,YAAU,eAAd,wB,eC1BHG,EAAQ,SAAEC,GACnB,IAAMC,EAAc,QACpB,IAAMD,EAAIC,GAAO,CACb,IAAMC,EAAyB,CAACZ,MAAOa,eACvCC,OAAOC,eAAeL,EAAKC,EAAKC,GAGpC,OAAOF,EAAIC,GAAKK,YCuDLC,EA9C2B,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,IAAKC,EAA0C,EAA1CA,SAC7C,EAA4B7B,IAAMQ,UAAS,GAA3C,mBAAOsB,EAAP,KAAeC,EAAf,KACOjC,EAA4B8B,EAA5B9B,KAAMkC,EAAsBJ,EAAtBI,KACPlB,EAAoBU,OAAOS,KAAKnC,GAChCoC,EAAsBV,OAAOS,KAAKD,GAAMG,QAAQ,SAACC,GAAD,OAAkBJ,EAAKI,GAAMC,QAAQC,UACrFC,EAAapB,EAAMS,GAEzB,OACI,eAAC,IAAMY,SAAP,WACI,qBAAIxB,YAAU,cAAd,UACI,oBAAIA,YAAU,eAAd,SAEQkB,EAAUI,OACN,wBAAQtB,YAAU,gBACVyB,QAAS,kBAAMV,GAAWD,IADlC,SAC4CA,EAAS,SAAM,WAE3D,OAGXhB,EAAQG,KAAI,SAACC,EAAgBwB,GAAjB,OACT,oBAAI1B,YAAU,eAAd,SAEKlB,EAAKoB,IAFV,UACYqB,EADZ,YACkBG,EADlB,aAKJ,oBAAI1B,YAAU,eAAeD,UAAU,aAAvC,SACI,wBAAQC,YAAU,gBAAgByB,QAASZ,EAAUd,UAAU,aAA/D,yBAIJe,EACII,EAAUjB,KAAI,SAACmB,EAAcM,GAAf,OACV,oBAA+B1B,YAAU,oBAAoBD,UAAU,YAAvE,SACI,qBAAI4B,QAAS7B,EAAQwB,OAAS,EAAGvB,UAAU,YAA3C,UACI,gCAAQqB,EAAKQ,gBACb,cAAC,EAAD,CAAOC,KAAMb,EAAKI,GAAMC,cAHhC,UAAYE,EAAZ,YAAkBG,EAAlB,YAOJ,SCnBLI,EApB6B,SAAC,GAAyC,IAAxCD,EAAuC,EAAvCA,KAC1C,EAAwB3C,IAAxB,mBAAOJ,EAAP,KAAaW,EAAb,KACA,EAA+BT,IAAMQ,SAAUqC,GAA/C,mBAAQE,EAAR,KAAmBC,EAAnB,KACMC,EAAYjD,IAAMkD,aAAY,SAACR,GACjCG,EAAKM,OAAOT,EAAO,GACnBjC,EAAQ,YAAIX,IACZkD,EAAQ,YAAIH,MACb,CAACA,EAAM/C,EAAMW,IAEhB,OACI,uBAAOO,YAAU,uBAAjB,SAEI+B,EAAU9B,KAAI,SAACW,EAAmBc,GAApB,OACV,cAAC,EAAD,CAAU1B,YAAU,sBAAsBY,IAAKA,EAAsBC,SAAU,kBAAMoB,EAAUP,KAAtCvB,EAAMS,UCDhEwB,EAbqB,SAAC,GAAqC,IAApCP,EAAmC,EAAnCA,KAClC,OACI,wBAAO7B,YAAU,kBAAkBD,UAAU,oBAA7C,UAEQ8B,EAAKP,OACD,cAAC,EAAD,CAAatB,YAAU,uBAAuBF,QAASU,OAAOS,KAAKY,EAAK,GAAG/C,QACzE,KAEV,cAAC,EAAD,CAAWkB,YAAU,qBAAqB6B,KAAMA,QCN7CQ,EARQ,WACnB,MAAenD,IAARJ,EAAP,oBAEA,OACI,cAAC,EAAD,CAAOkB,YAAU,uBAAuB6B,KAAM/C,KCDvCwD,MAVf,WACE,OACE,qBAAKvC,UAAU,sBAAsBC,YAAU,gBAA/C,SACE,cAAC,EAAD,UACI,cAAC,EAAD,SCMKuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4b081f13.chunk.js","sourcesContent":["import React, {Dispatch, ProviderProps, SetStateAction} from \"react\";\r\nimport {TableRow} from \"../types\";\r\nimport data from \"../data/data.json\";\r\n\r\n\r\nconst initData: TableRow[] = data as any as TableRow[];\r\nconst dataContext = React.createContext(null);\r\n\r\n/**\r\n * @function useData\r\n * @returns {Array} dataContext value, which is a state of [value, setter].\r\n *\r\n */\r\nexport const useData: () => [TableRow[], Dispatch<SetStateAction<TableRow[]>>] =\r\n    () => {\r\n        // useContext is a hook that returns the context value\r\n        // In this case, the context value is an [value, setter] array for the context state\r\n        // useContext also subscribes to changes, and will update any time the context value updates\r\n        //     we've memoized this so that it will only update when the data value updates\r\n        const context = React.useContext(dataContext);\r\n\r\n        // throw an error if the context doesn't exist -- means we aren't in a provider\r\n        if (!context) {\r\n            throw new Error(\"useData must be used within a DataProvider\");\r\n        }\r\n\r\n        // otherwise return the context\r\n        return context as any as [TableRow[], Dispatch<SetStateAction<TableRow[]>>];\r\n    };\r\n\r\n/**\r\n * @function DataProvider\r\n * @param {object} props - props to pass through from declared component\r\n * @returns {JSX.Element} Provider component\r\n */\r\nexport const DataProvider = (props: Partial<ProviderProps<any>>) => {\r\n    // create state that will be used within the provider\r\n    // initial state value is DataProvider\r\n    const [data, setData] = React.useState(initData);\r\n\r\n    // value for the context provider will be array of [value, setter] for data state\r\n    // useMemo just ensures that the provider value will only update when data updates\r\n    // No need to test this -- React tests useMemo for us!\r\n    const value = React.useMemo(() => [data, setData], [data, setData]);\r\n\r\n    // Return a Provider component with the [value, setter] array as the value, passing through the props\r\n    return <dataContext.Provider value={value} {...props} />;\r\n};\r\n\r\nconst contextExport = {DataProvider, useData};\r\n\r\nexport default contextExport;","import React from \"react\";\r\n\r\nexport interface TableHeaderProps {\r\n    columns: string[];\r\n}\r\n\r\n/**\r\n * TableHeader component\r\n *\r\n * @param data\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst TableHeader: React.FC<TableHeaderProps> = ({columns}: TableHeaderProps): JSX.Element => {\r\n    return (\r\n        <thead className=\"thead-light\" data-test=\"component-table-header\">\r\n            <tr data-test=\"element-row\">\r\n                <th data-test=\"element-head\">&nbsp;</th>\r\n                {columns.map(column => (\r\n                    <th\r\n                        data-test=\"element-head\"\r\n                        key={column}\r\n                        className=\"text-nowrap font-weight-normal align-middle p-1\"\r\n                    >\r\n                        {column}\r\n                    </th>\r\n                ))}\r\n                <th data-test=\"element-head\">&nbsp;</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default TableHeader;\r\n","import {v4 as uuid} from 'uuid';\r\n\r\nexport const getId = ( obj: Record<string, any> ): string => {\r\n    const key: string = '_uuid';\r\n    if (!(obj[key])) {\r\n        const pd: PropertyDescriptor = {value: uuid()};\r\n        Object.defineProperty(obj, key, pd);\r\n    }\r\n\r\n    return obj[key].toString();\r\n};","import React from \"react\";\r\nimport {TableRow as TableRowType} from \"../types\";\r\nimport Table from \"./table\";\r\nimport {getId} from \"../utils\";\r\n\r\nexport interface TableRowProps {\r\n    row: TableRowType;\r\n    onRemove: () => void;\r\n}\r\n\r\n/**\r\n *\r\n * @param row\r\n * @param onRemove\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst TableRow: React.FC<TableRowProps> = ({row, onRemove}: TableRowProps): JSX.Element => {\r\n    const [opened, setOpened] = React.useState(false);\r\n    const {data, kids}: TableRowType = row;\r\n    const columns: string[] = Object.keys(data);\r\n    const kidsProps: string[] = Object.keys(kids).filter( (prop: string) => kids[prop].records.length );\r\n    const id: string = getId(row);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <tr data-test=\"element-row\">\r\n                <td data-test=\"element-cell\">\r\n                    {\r\n                        kidsProps.length ?\r\n                            <button data-test=\"button-toggle\"\r\n                                    onClick={() => setOpened(!opened)}>{opened ? \"ᐯ\" : \"ᐳ\"}</button>\r\n                            :\r\n                            null\r\n                    }\r\n                </td>\r\n                {columns.map((column: string, index: number) => (\r\n                    <td data-test=\"element-cell\"\r\n                        key={`${id}-${index}-cell`}>\r\n                        {data[column]}\r\n                    </td>\r\n                ))}\r\n                <td data-test=\"element-cell\" className=\"text-right\">\r\n                    <button data-test=\"button-remove\" onClick={onRemove} className=\"text-muted\">✖</button>\r\n                </td>\r\n            </tr>\r\n            {\r\n                opened ?\r\n                    kidsProps.map((prop: string, index: number) => (\r\n                        <tr key={`${id}-${index}-row`} data-test=\"element-child-row\" className=\"child-row\">\r\n                            <td colSpan={columns.length + 2} className=\"pr-0 pl-5\">\r\n                                <label>{prop.toUpperCase()}</label>\r\n                                <Table rows={kids[prop].records}/>\r\n                            </td>\r\n                        </tr>\r\n                    )) :\r\n                    null\r\n            }\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TableRow;\r\n","import React from \"react\";\r\nimport {TableRow as TableRowType} from \"../types\";\r\nimport TableRow from \"./table-row\";\r\nimport {getId} from \"../utils\";\r\nimport {useData} from \"../contexts/data-context\";\r\n\r\nexport interface TableBodyProps {\r\n    rows: TableRowType[];\r\n}\r\n\r\n/**\r\n * TableBody component\r\n *\r\n * @param rows\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst TableBody: React.FC<TableBodyProps> = ({rows}: TableBodyProps): JSX.Element => {\r\n    const [data, setData] = useData();\r\n    const [ stateRows, setRows ] = React.useState( rows );\r\n    const removeRow = React.useCallback((index: number) => {\r\n        rows.splice(index, 1);\r\n        setData([...data]);\r\n        setRows([...rows]);\r\n    }, [rows, data, setData]);\r\n\r\n    return (\r\n        <tbody data-test=\"component-table-body\">\r\n        {\r\n            stateRows.map((row: TableRowType, index: number) => (\r\n                <TableRow data-test=\"component-table-row\" row={row} key={getId(row)} onRemove={() => removeRow(index)} />\r\n            ))\r\n        }\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport TableHeader from \"./table-header\";\r\nimport TableBody from \"./table-body\";\r\nimport {TableRow} from \"../types\";\r\n\r\nexport interface TableProps {\r\n    rows: TableRow[];\r\n}\r\n\r\n/**\r\n * Table component\r\n *\r\n * @param rows\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst Table: React.FC<TableProps> = ({rows}: TableProps): JSX.Element => {\r\n    return (\r\n        <table data-test=\"component-table\" className=\"table table-hover\">\r\n            {\r\n                rows.length ?\r\n                    <TableHeader data-test=\"element-table-header\" columns={Object.keys(rows[0].data)}/>\r\n                    : null\r\n            }\r\n            <TableBody data-test=\"element-table-body\" rows={rows}/>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport Table from \"../components/table\";\r\nimport {useData} from \"../contexts/data-context\";\r\n\r\n/**\r\n * Main page component\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst Main: React.FC = (): JSX.Element => {\r\n    const [data] = useData();\r\n\r\n    return (\r\n        <Table data-test=\"component-table-main\" rows={data}/>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport {DataProvider} from \"./contexts/data-context\";\nimport Main from \"./pages/main\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid p-2\" data-test=\"component-app\">\n      <DataProvider>\n          <Main/>\n      </DataProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}